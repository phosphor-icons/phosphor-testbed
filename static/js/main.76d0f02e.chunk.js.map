{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["defaultIcons","Android","ArrowBendDownLeft","ArrowUpRightCircle","Backspace","BatteryMedium","CalendarX","CaretRight","CheckCircle","Clock","Cloud","Cube","Envelope","EnvelopeSimple","FileText","FingerprintDense","Folder","FolderDip","FolderSimple","MagnifyingGlass","MapPin","Microphone","MinusCircle","NotePencil","NotesSixteenth","Pen","PencilLine","PlayCircle","PlusCircle","Prohibit","Smiley","SmileyMeh","SpeakerNone","SpeakerX","Star","Translate","Trash","TwoCircle","UserCircle","Warning","WifiMedium","App","useState","rand","setRand","size","setSize","weight","setWeight","testIconStrings","setTestIconStrings","onDrop","useCallback","acceptedFiles","forEach","file","reader","FileReader","onabort","console","log","onerror","onload","binaryStr","result","existing","suffix","name","split","slice","readAsText","shuffled","useMemo","map","Icon","index","key","className","length","svgString","push","height","width","src","encodeURIComponent","alt","i","j","Math","floor","random","temp","value","onChange","e","target","rest","onClick","currentTarget","select","multiple","accept","getRootProps","getInputProps","min","max","step","type","Number","Provider","color","mirrored","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kSAgDMA,G,MAAe,CACnBC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAvC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,MA8OaC,MAzOf,WAAgB,IAAD,IACWC,mBAAiB,GAD5B,mBACNC,EADM,KACAC,EADA,OAEWF,mBAAiB,IAF5B,mBAENG,EAFM,KAEAC,EAFA,OAGeJ,mBAAiB,WAHhC,mBAGNK,EAHM,KAGEC,EAHF,OAIiCN,mBAAmB,IAJpD,mBAINO,EAJM,KAIWC,EAJX,KAMPC,EAASC,uBAAY,SAACC,GAC1BA,EAAcC,SAAQ,SAACC,GACrB,IAAMC,EAAS,IAAIC,WAEnBD,EAAOE,QAAU,kBAAMC,QAAQC,IAAI,6BACnCJ,EAAOK,QAAU,kBAAMF,QAAQC,IAAI,4BACnCJ,EAAOM,OAAS,WACd,IAAMC,EAAYP,EAAOQ,OACzBd,GAAmB,SAACe,GAAD,4BAAkBA,GAAlB,CAA4BF,OAC/C,IAAMG,EAASX,EAAKY,KAAKC,MAAM,QAAQ,GAAGA,MAAM,KAAKC,OAAO,GAAG,GAC/D,OAAQH,GACN,IAAK,OACL,IAAK,QACL,IAAK,OACL,IAAK,OACHlB,EAAUkB,GACV,MACF,IAAK,MACL,IAAK,UACHlB,EAAU,WACV,MACF,QACEA,EAAU,aAIhBQ,EAAOc,WAAWf,EAAM,aAEzB,IAEGgB,EAAWC,mBAAQ,WACvB,IAAMD,EAA8BvE,EAAayE,KAAI,SAACC,EAAMC,GAAP,OACnD,kBAACD,EAAD,CAAME,IAAKD,EAAOE,UAAU,YAE1B5B,EAAgB6B,QAClB7B,EAAgBK,SAAQ,SAACyB,EAAWJ,GAClCJ,EAASS,KACP,yBACEJ,IAAK5E,EAAa8E,OAASH,EAAQ,IACnCM,OAAQpC,EACRqC,MAAOrC,EACPsC,IAAK,sBAAwBC,mBAAmBL,GAChDM,IAAI,GACJR,UAAU,SAEZ,yBACED,IAAK5E,EAAa8E,OAASH,EAAQ,IAAM,EACzCM,OAAQpC,EACRqC,MAAOrC,EACPsC,IAAK,sBAAwBC,mBAAmBL,GAChDM,IAAI,GACJR,UAAU,SAEZ,yBACED,IAAK5E,EAAa8E,OAASH,EAAQ,IAAM,EACzCM,OAAQpC,EACRqC,MAAOrC,EACPsC,IAAK,sBAAwBC,mBAAmBL,GAChDM,IAAI,GACJR,UAAU,SAEZ,yBACED,IAAK5E,EAAa8E,OAASH,EAAQ,IAAM,EACzCM,OAAQpC,EACRqC,MAAOrC,EACPsC,IAAK,sBAAwBC,mBAAmBL,GAChDM,IAAI,GACJR,UAAU,SAEZ,yBACED,IAAK5E,EAAa8E,OAASH,EAAQ,IAAM,EACzCM,OAAQpC,EACRqC,MAAOrC,EACPsC,IAAK,sBAAwBC,mBAAmBL,GAChDM,IAAI,GACJR,UAAU,SAEZ,yBACED,IAAK5E,EAAa8E,OAASH,EAAQ,IAAM,EACzCM,OAAQpC,EACRqC,MAAOrC,EACPsC,IAAK,sBAAwBC,mBAAmBL,GAChDM,IAAI,GACJR,UAAU,aAKlB,IAAK,IAAIS,EAAIf,EAASO,OAAS,EAAGQ,EAAI,EAAGA,IAAK,CAC5C,IAAMC,EAAIC,KAAKC,MAAMD,KAAKE,SAAWJ,GAC/BK,EAAOpB,EAASe,GACtBf,EAASe,GAAKf,EAASgB,GACvBhB,EAASgB,GAAKI,EAEhB,OAAOpB,IACN,CAAC1B,EAAMI,EAAiBN,IAE3B,OACE,yBAAKkC,UAAU,OACb,gDACA,yBAAKA,UAAU,cACb,yBAAKA,UAAU,gBACb,8BACEe,MAAK,UAAE3C,EAAgB,UAAlB,QAAwB,GAC7B4C,SAAU,SAACC,GAAO,IAEJF,EACRE,EADFC,OAAUH,MAEZ1C,GAAmB,SAACe,GAAc,IACpB+B,EADmB,YACX/B,GADW,SAE/B,MAAM,CAAE2B,GAAR,mBAAkBI,QAGtBC,QAAS,SAACH,GAAD,OAAOA,EAAEI,cAAcC,YAElC,kBAAC,IAAD,CAAUC,UAAU,EAAMC,OAAO,UAAUlD,OAAQA,IAChD,gBAAGmD,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,cAAjB,OACC,uCAAK1B,UAAU,YAAeyB,KAC5B,0BAAWC,KACX,gGAOR,4BAAQN,QAAS,kBAAMrD,EAAQ4C,KAAKE,YAApC,WACA,2BACEc,IAAK,GACLC,IAAK,IACLC,KAAM,EACNd,MAAO/C,EACP8D,KAAK,QACLd,SAAU,gBAAaD,EAAb,EAAGG,OAAUH,MAAb,OAA2B9C,EAAQ8D,OAAOhB,OAErD/C,EACD,4BACE+C,MAAO7C,EACP8C,SAAU,gBAAaD,EAAb,EAAGG,OAAUH,MAAb,OAA2B5C,EAAU4C,KAE/C,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,SAAd,SACA,4BAAQA,MAAM,WAAd,WACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,WAAd,YAEF,4BAAQK,QAAS,kBAAM/C,EAAmB,MAA1C,UAEF,yBAAK2B,UAAU,mBACb,yBAAKA,UAAU,gBACb,kBAAC,IAAYgC,SAAb,CACEjB,MAAO,CACLkB,MAAO,QACPjE,KAAMA,EACNE,OAAQA,EACRgE,UAAU,IAGXxC,KAKNtB,EAAgB6B,QACf,oCACE,yBAAKD,UAAU,mBACb,4BAAQA,UAAU,eAChB,yBACEI,OAAQ,GACRC,MAAO,GACPC,IACE,sBAAwBC,mBAAmBnC,EAAgB,IAE7DoC,IAAI,KAPR,kBAWA,4BAAQR,UAAU,eAChB,kBAAC,IAAD,CAAQhC,KAAM,GAAIE,OAAQA,IAD5B,mBAKF,yBAAK8B,UAAU,mBACb,4BAAQA,UAAU,sBAChB,yBACEI,OAAQ,GACRC,MAAO,GACPC,IACE,sBAAwBC,mBAAmBnC,EAAgB,IAE7DoC,IAAI,KAPR,mBAYF,yBAAKR,UAAU,mBACb,4BAAQA,UAAU,sBAChB,kBAAC,IAAD,CAAQhC,KAAM,GAAIE,OAAQA,IAD5B,mBAKF,yBAAK8B,UAAU,mBACb,4BAAQA,UAAU,qBAChB,yBACEI,OAAQ,GACRC,MAAO,GACPC,IACE,sBAAwBC,mBAAmBnC,EAAgB,IAE7DoC,IAAI,KAPR,mBAYF,yBAAKR,UAAU,mBACb,4BAAQA,UAAU,qBAChB,kBAAC,IAAD,CAAQhC,KAAM,GAAIE,OAAQA,IAD5B,sBCvVQiE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtE,QAAQsE,MAAMA,EAAMC,c","file":"static/js/main.76d0f02e.chunk.js","sourcesContent":["import React, { useState, useMemo, useCallback } from \"react\";\nimport Dropzone from \"react-dropzone\";\nimport {\n  IconContext,\n  Android,\n  ArrowBendDownLeft,\n  ArrowUpRightCircle,\n  Backspace,\n  BatteryMedium,\n  CalendarX,\n  CaretRight,\n  CheckCircle,\n  Clock,\n  Cloud,\n  Cube,\n  Envelope,\n  EnvelopeSimple,\n  FileText,\n  FingerprintDense,\n  Folder,\n  FolderDip,\n  FolderSimple,\n  MagnifyingGlass,\n  MapPin,\n  Microphone,\n  MinusCircle,\n  NotePencil,\n  NotesSixteenth,\n  Pen,\n  PencilLine,\n  PlayCircle,\n  PlusCircle,\n  Prohibit,\n  Smiley,\n  SmileyMeh,\n  SpeakerNone,\n  SpeakerX,\n  Star,\n  Translate,\n  Trash,\n  TwoCircle,\n  UserCircle,\n  Warning,\n  WifiMedium,\n} from \"phosphor-react\";\n\nimport \"./App.css\";\n\nconst defaultIcons = [\n  Android,\n  ArrowBendDownLeft,\n  ArrowUpRightCircle,\n  Backspace,\n  BatteryMedium,\n  CalendarX,\n  CaretRight,\n  CheckCircle,\n  Clock,\n  Cloud,\n  Cube,\n  Envelope,\n  EnvelopeSimple,\n  FileText,\n  FingerprintDense,\n  Folder,\n  FolderDip,\n  FolderSimple,\n  MagnifyingGlass,\n  MapPin,\n  Microphone,\n  MinusCircle,\n  NotePencil,\n  NotesSixteenth,\n  Pen,\n  PencilLine,\n  PlayCircle,\n  PlusCircle,\n  Prohibit,\n  Smiley,\n  SmileyMeh,\n  SpeakerNone,\n  SpeakerX,\n  Star,\n  Translate,\n  Trash,\n  TwoCircle,\n  UserCircle,\n  Warning,\n  WifiMedium,\n  Android,\n  ArrowBendDownLeft,\n  ArrowUpRightCircle,\n  Backspace,\n  BatteryMedium,\n  CalendarX,\n  CaretRight,\n  CheckCircle,\n  Clock,\n  Cloud,\n  Cube,\n  Envelope,\n  EnvelopeSimple,\n  FileText,\n  FingerprintDense,\n  Folder,\n  FolderDip,\n  FolderSimple,\n  MagnifyingGlass,\n  MapPin,\n  Microphone,\n  MinusCircle,\n  NotePencil,\n  NotesSixteenth,\n  Pen,\n  PencilLine,\n  PlayCircle,\n  PlusCircle,\n  Prohibit,\n  Smiley,\n  SmileyMeh,\n  SpeakerNone,\n  SpeakerX,\n  Star,\n  Translate,\n  Trash,\n  TwoCircle,\n  UserCircle,\n  Warning,\n  WifiMedium,\n];\n\ntype Weight = \"thin\" | \"light\" | \"regular\" | \"bold\" | \"fill\" | \"duotone\";\n\nfunction App() {\n  const [rand, setRand] = useState<number>(0);\n  const [size, setSize] = useState<number>(32);\n  const [weight, setWeight] = useState<Weight>(\"regular\");\n  const [testIconStrings, setTestIconStrings] = useState<string[]>([]);\n\n  const onDrop = useCallback((acceptedFiles: File[]) => {\n    acceptedFiles.forEach((file) => {\n      const reader = new FileReader();\n\n      reader.onabort = () => console.log(\"file reading was aborted\");\n      reader.onerror = () => console.log(\"file reading has failed\");\n      reader.onload = () => {\n        const binaryStr = reader.result as string;\n        setTestIconStrings((existing) => [...existing, binaryStr]);\n        const suffix = file.name.split(\".svg\")[0].split(\"-\").slice(-1)[0];\n        switch (suffix) {\n          case \"thin\":\n          case \"light\":\n          case \"bold\":\n          case \"fill\":\n            setWeight(suffix);\n            break;\n          case \"duo\":\n          case \"duotone\":\n            setWeight(\"duotone\");\n            break;\n          default:\n            setWeight(\"regular\");\n            break;\n        }\n      };\n      reader.readAsText(file, \"utf8\");\n    });\n  }, []);\n\n  const shuffled = useMemo(() => {\n    const shuffled: React.ReactNode[] = defaultIcons.map((Icon, index) => (\n      <Icon key={index} className=\"icon\" />\n    ));\n    if (testIconStrings.length) {\n      testIconStrings.forEach((svgString, index) => {\n        shuffled.push(\n          <img\n            key={defaultIcons.length * index + 100}\n            height={size}\n            width={size}\n            src={\"data:image/svg+xml,\" + encodeURIComponent(svgString)}\n            alt=\"\"\n            className=\"icon\"\n          />,\n          <img\n            key={defaultIcons.length * index + 100 + 1}\n            height={size}\n            width={size}\n            src={\"data:image/svg+xml,\" + encodeURIComponent(svgString)}\n            alt=\"\"\n            className=\"icon\"\n          />,\n          <img\n            key={defaultIcons.length * index + 100 + 2}\n            height={size}\n            width={size}\n            src={\"data:image/svg+xml,\" + encodeURIComponent(svgString)}\n            alt=\"\"\n            className=\"icon\"\n          />,\n          <img\n            key={defaultIcons.length * index + 100 + 3}\n            height={size}\n            width={size}\n            src={\"data:image/svg+xml,\" + encodeURIComponent(svgString)}\n            alt=\"\"\n            className=\"icon\"\n          />,\n          <img\n            key={defaultIcons.length * index + 100 + 4}\n            height={size}\n            width={size}\n            src={\"data:image/svg+xml,\" + encodeURIComponent(svgString)}\n            alt=\"\"\n            className=\"icon\"\n          />,\n          <img\n            key={defaultIcons.length * index + 100 + 5}\n            height={size}\n            width={size}\n            src={\"data:image/svg+xml,\" + encodeURIComponent(svgString)}\n            alt=\"\"\n            className=\"icon\"\n          />\n        );\n      });\n    }\n    for (let i = shuffled.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * i);\n      const temp = shuffled[i];\n      shuffled[i] = shuffled[j];\n      shuffled[j] = temp;\n    }\n    return shuffled;\n  }, [size, testIconStrings, rand]);\n\n  return (\n    <div className=\"app\">\n      <h1>Phosphor Testbed</h1>\n      <div className=\"stickymenu\">\n        <div className=\"stickyinputs\">\n          <textarea\n            value={testIconStrings[0] ?? \"\"}\n            onChange={(e) => {\n              const {\n                target: { value },\n              } = e;\n              setTestIconStrings((existing) => {\n                const [, ...rest] = existing;\n                return [value, ...rest];\n              });\n            }}\n            onClick={(e) => e.currentTarget.select()}\n          />\n          <Dropzone multiple={true} accept=\"image/*\" onDrop={onDrop}>\n            {({ getRootProps, getInputProps }) => (\n              <div className=\"dropzone\" {...getRootProps()}>\n                <input {...getInputProps()} />\n                <p>\n                  Drag 'n drop one or more SVGs here, or click to select files\n                </p>\n              </div>\n            )}\n          </Dropzone>\n        </div>\n        <button onClick={() => setRand(Math.random())}>Shuffle</button>\n        <input\n          min={16}\n          max={192}\n          step={4}\n          value={size}\n          type=\"range\"\n          onChange={({ target: { value } }) => setSize(Number(value))}\n        />\n        {size}\n        <select\n          value={weight}\n          onChange={({ target: { value } }) => setWeight(value as Weight)}\n        >\n          <option value=\"thin\">Thin</option>\n          <option value=\"light\">Light</option>\n          <option value=\"regular\">Regular</option>\n          <option value=\"bold\">Bold</option>\n          <option value=\"fill\">Fill</option>\n          <option value=\"duotone\">Duotone</option>\n        </select>\n        <button onClick={() => setTestIconStrings([])}>Clear</button>\n      </div>\n      <div className=\"phone-container\">\n        <div className=\"phone-chrome\">\n          <IconContext.Provider\n            value={{\n              color: \"black\",\n              size: size,\n              weight: weight,\n              mirrored: false,\n            }}\n          >\n            {shuffled}\n          </IconContext.Provider>\n        </div>\n      </div>\n\n      {testIconStrings.length && (\n        <>\n          <div className=\"phone-container\">\n            <button className=\"test-button\">\n              <img\n                height={24}\n                width={24}\n                src={\n                  \"data:image/svg+xml,\" + encodeURIComponent(testIconStrings[0])\n                }\n                alt=\"\"\n              />\n              Download Icons\n            </button>\n            <button className=\"test-button\">\n              <Smiley size={24} weight={weight} />\n              Download Icons\n            </button>\n          </div>\n          <div className=\"phone-container\">\n            <button className=\"test-button medium\">\n              <img\n                height={32}\n                width={32}\n                src={\n                  \"data:image/svg+xml,\" + encodeURIComponent(testIconStrings[0])\n                }\n                alt=\"\"\n              />\n              Download Icons\n            </button>\n          </div>\n          <div className=\"phone-container\">\n            <button className=\"test-button medium\">\n              <Smiley size={32} weight={weight} />\n              Download Icons\n            </button>\n          </div>\n          <div className=\"phone-container\">\n            <button className=\"test-button large\">\n              <img\n                height={48}\n                width={48}\n                src={\n                  \"data:image/svg+xml,\" + encodeURIComponent(testIconStrings[0])\n                }\n                alt=\"\"\n              />\n              Download Icons\n            </button>\n          </div>\n          <div className=\"phone-container\">\n            <button className=\"test-button large\">\n              <Smiley size={48} weight={weight} />\n              Download Icons\n            </button>\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}